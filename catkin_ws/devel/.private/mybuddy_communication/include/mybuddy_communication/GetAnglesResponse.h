// Generated by gencpp from file mybuddy_communication/GetAnglesResponse.msg
// DO NOT EDIT!


#ifndef MYBUDDY_COMMUNICATION_MESSAGE_GETANGLESRESPONSE_H
#define MYBUDDY_COMMUNICATION_MESSAGE_GETANGLESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mybuddy_communication
{
template <class ContainerAllocator>
struct GetAnglesResponse_
{
  typedef GetAnglesResponse_<ContainerAllocator> Type;

  GetAnglesResponse_()
    : joint_0(0.0)
    , joint_1(0.0)
    , joint_2(0.0)
    , joint_3(0.0)
    , joint_4(0.0)
    , joint_5(0.0)
    , joint_6(0.0)
    , joint_7(0.0)
    , joint_8(0.0)
    , joint_9(0.0)
    , joint_10(0.0)
    , joint_11(0.0)
    , joint_12(0.0)  {
    }
  GetAnglesResponse_(const ContainerAllocator& _alloc)
    : joint_0(0.0)
    , joint_1(0.0)
    , joint_2(0.0)
    , joint_3(0.0)
    , joint_4(0.0)
    , joint_5(0.0)
    , joint_6(0.0)
    , joint_7(0.0)
    , joint_8(0.0)
    , joint_9(0.0)
    , joint_10(0.0)
    , joint_11(0.0)
    , joint_12(0.0)  {
  (void)_alloc;
    }



   typedef float _joint_0_type;
  _joint_0_type joint_0;

   typedef float _joint_1_type;
  _joint_1_type joint_1;

   typedef float _joint_2_type;
  _joint_2_type joint_2;

   typedef float _joint_3_type;
  _joint_3_type joint_3;

   typedef float _joint_4_type;
  _joint_4_type joint_4;

   typedef float _joint_5_type;
  _joint_5_type joint_5;

   typedef float _joint_6_type;
  _joint_6_type joint_6;

   typedef float _joint_7_type;
  _joint_7_type joint_7;

   typedef float _joint_8_type;
  _joint_8_type joint_8;

   typedef float _joint_9_type;
  _joint_9_type joint_9;

   typedef float _joint_10_type;
  _joint_10_type joint_10;

   typedef float _joint_11_type;
  _joint_11_type joint_11;

   typedef float _joint_12_type;
  _joint_12_type joint_12;





  typedef boost::shared_ptr< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetAnglesResponse_

typedef ::mybuddy_communication::GetAnglesResponse_<std::allocator<void> > GetAnglesResponse;

typedef boost::shared_ptr< ::mybuddy_communication::GetAnglesResponse > GetAnglesResponsePtr;
typedef boost::shared_ptr< ::mybuddy_communication::GetAnglesResponse const> GetAnglesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator1> & lhs, const ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.joint_0 == rhs.joint_0 &&
    lhs.joint_1 == rhs.joint_1 &&
    lhs.joint_2 == rhs.joint_2 &&
    lhs.joint_3 == rhs.joint_3 &&
    lhs.joint_4 == rhs.joint_4 &&
    lhs.joint_5 == rhs.joint_5 &&
    lhs.joint_6 == rhs.joint_6 &&
    lhs.joint_7 == rhs.joint_7 &&
    lhs.joint_8 == rhs.joint_8 &&
    lhs.joint_9 == rhs.joint_9 &&
    lhs.joint_10 == rhs.joint_10 &&
    lhs.joint_11 == rhs.joint_11 &&
    lhs.joint_12 == rhs.joint_12;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator1> & lhs, const ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mybuddy_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3171ff4c46453619f029b9644dce9ae5";
  }

  static const char* value(const ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3171ff4c46453619ULL;
  static const uint64_t static_value2 = 0xf029b9644dce9ae5ULL;
};

template<class ContainerAllocator>
struct DataType< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mybuddy_communication/GetAnglesResponse";
  }

  static const char* value(const ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# float32 joint_1\n"
"# float32 joint_2\n"
"# float32 joint_3\n"
"# float32 joint_4\n"
"# float32 joint_5\n"
"# float32 joint_6\n"
"\n"
"float32 joint_0\n"
"float32 joint_1\n"
"float32 joint_2\n"
"float32 joint_3\n"
"float32 joint_4\n"
"float32 joint_5\n"
"float32 joint_6\n"
"float32 joint_7\n"
"float32 joint_8\n"
"float32 joint_9\n"
"float32 joint_10\n"
"float32 joint_11\n"
"float32 joint_12\n"
"\n"
"\n"
;
  }

  static const char* value(const ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_0);
      stream.next(m.joint_1);
      stream.next(m.joint_2);
      stream.next(m.joint_3);
      stream.next(m.joint_4);
      stream.next(m.joint_5);
      stream.next(m.joint_6);
      stream.next(m.joint_7);
      stream.next(m.joint_8);
      stream.next(m.joint_9);
      stream.next(m.joint_10);
      stream.next(m.joint_11);
      stream.next(m.joint_12);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetAnglesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mybuddy_communication::GetAnglesResponse_<ContainerAllocator>& v)
  {
    s << indent << "joint_0: ";
    Printer<float>::stream(s, indent + "  ", v.joint_0);
    s << indent << "joint_1: ";
    Printer<float>::stream(s, indent + "  ", v.joint_1);
    s << indent << "joint_2: ";
    Printer<float>::stream(s, indent + "  ", v.joint_2);
    s << indent << "joint_3: ";
    Printer<float>::stream(s, indent + "  ", v.joint_3);
    s << indent << "joint_4: ";
    Printer<float>::stream(s, indent + "  ", v.joint_4);
    s << indent << "joint_5: ";
    Printer<float>::stream(s, indent + "  ", v.joint_5);
    s << indent << "joint_6: ";
    Printer<float>::stream(s, indent + "  ", v.joint_6);
    s << indent << "joint_7: ";
    Printer<float>::stream(s, indent + "  ", v.joint_7);
    s << indent << "joint_8: ";
    Printer<float>::stream(s, indent + "  ", v.joint_8);
    s << indent << "joint_9: ";
    Printer<float>::stream(s, indent + "  ", v.joint_9);
    s << indent << "joint_10: ";
    Printer<float>::stream(s, indent + "  ", v.joint_10);
    s << indent << "joint_11: ";
    Printer<float>::stream(s, indent + "  ", v.joint_11);
    s << indent << "joint_12: ";
    Printer<float>::stream(s, indent + "  ", v.joint_12);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYBUDDY_COMMUNICATION_MESSAGE_GETANGLESRESPONSE_H
