// Generated by gencpp from file ultraarm_communication/ultraArmAngles.msg
// DO NOT EDIT!


#ifndef ULTRAARM_COMMUNICATION_MESSAGE_ULTRAARMANGLES_H
#define ULTRAARM_COMMUNICATION_MESSAGE_ULTRAARMANGLES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ultraarm_communication
{
template <class ContainerAllocator>
struct ultraArmAngles_
{
  typedef ultraArmAngles_<ContainerAllocator> Type;

  ultraArmAngles_()
    : joint_1(0.0)
    , joint_2(0.0)
    , joint_3(0.0)  {
    }
  ultraArmAngles_(const ContainerAllocator& _alloc)
    : joint_1(0.0)
    , joint_2(0.0)
    , joint_3(0.0)  {
  (void)_alloc;
    }



   typedef float _joint_1_type;
  _joint_1_type joint_1;

   typedef float _joint_2_type;
  _joint_2_type joint_2;

   typedef float _joint_3_type;
  _joint_3_type joint_3;





  typedef boost::shared_ptr< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> const> ConstPtr;

}; // struct ultraArmAngles_

typedef ::ultraarm_communication::ultraArmAngles_<std::allocator<void> > ultraArmAngles;

typedef boost::shared_ptr< ::ultraarm_communication::ultraArmAngles > ultraArmAnglesPtr;
typedef boost::shared_ptr< ::ultraarm_communication::ultraArmAngles const> ultraArmAnglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ultraarm_communication::ultraArmAngles_<ContainerAllocator1> & lhs, const ::ultraarm_communication::ultraArmAngles_<ContainerAllocator2> & rhs)
{
  return lhs.joint_1 == rhs.joint_1 &&
    lhs.joint_2 == rhs.joint_2 &&
    lhs.joint_3 == rhs.joint_3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ultraarm_communication::ultraArmAngles_<ContainerAllocator1> & lhs, const ::ultraarm_communication::ultraArmAngles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ultraarm_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8fb7487773865b96db936ca595817338";
  }

  static const char* value(const ::ultraarm_communication::ultraArmAngles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8fb7487773865b96ULL;
  static const uint64_t static_value2 = 0xdb936ca595817338ULL;
};

template<class ContainerAllocator>
struct DataType< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ultraarm_communication/ultraArmAngles";
  }

  static const char* value(const ::ultraarm_communication::ultraArmAngles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 joint_1\n"
"float32 joint_2\n"
"float32 joint_3\n"
;
  }

  static const char* value(const ::ultraarm_communication::ultraArmAngles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_1);
      stream.next(m.joint_2);
      stream.next(m.joint_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ultraArmAngles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ultraarm_communication::ultraArmAngles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ultraarm_communication::ultraArmAngles_<ContainerAllocator>& v)
  {
    s << indent << "joint_1: ";
    Printer<float>::stream(s, indent + "  ", v.joint_1);
    s << indent << "joint_2: ";
    Printer<float>::stream(s, indent + "  ", v.joint_2);
    s << indent << "joint_3: ";
    Printer<float>::stream(s, indent + "  ", v.joint_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ULTRAARM_COMMUNICATION_MESSAGE_ULTRAARMANGLES_H
