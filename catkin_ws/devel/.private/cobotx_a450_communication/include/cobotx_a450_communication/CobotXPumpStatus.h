// Generated by gencpp from file cobotx_a450_communication/CobotXPumpStatus.msg
// DO NOT EDIT!


#ifndef COBOTX_A450_COMMUNICATION_MESSAGE_COBOTXPUMPSTATUS_H
#define COBOTX_A450_COMMUNICATION_MESSAGE_COBOTXPUMPSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cobotx_a450_communication
{
template <class ContainerAllocator>
struct CobotXPumpStatus_
{
  typedef CobotXPumpStatus_<ContainerAllocator> Type;

  CobotXPumpStatus_()
    : Status(false)
    , Pin1(0)
    , Pin2(0)  {
    }
  CobotXPumpStatus_(const ContainerAllocator& _alloc)
    : Status(false)
    , Pin1(0)
    , Pin2(0)  {
  (void)_alloc;
    }



   typedef uint8_t _Status_type;
  _Status_type Status;

   typedef int8_t _Pin1_type;
  _Pin1_type Pin1;

   typedef int8_t _Pin2_type;
  _Pin2_type Pin2;





  typedef boost::shared_ptr< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> const> ConstPtr;

}; // struct CobotXPumpStatus_

typedef ::cobotx_a450_communication::CobotXPumpStatus_<std::allocator<void> > CobotXPumpStatus;

typedef boost::shared_ptr< ::cobotx_a450_communication::CobotXPumpStatus > CobotXPumpStatusPtr;
typedef boost::shared_ptr< ::cobotx_a450_communication::CobotXPumpStatus const> CobotXPumpStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator1> & lhs, const ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator2> & rhs)
{
  return lhs.Status == rhs.Status &&
    lhs.Pin1 == rhs.Pin1 &&
    lhs.Pin2 == rhs.Pin2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator1> & lhs, const ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cobotx_a450_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e36aa99b915b73d981939d713e2c8a1";
  }

  static const char* value(const ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e36aa99b915b73dULL;
  static const uint64_t static_value2 = 0x981939d713e2c8a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cobotx_a450_communication/CobotXPumpStatus";
  }

  static const char* value(const ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool Status\n"
"int8 Pin1\n"
"int8 Pin2\n"
;
  }

  static const char* value(const ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Status);
      stream.next(m.Pin1);
      stream.next(m.Pin2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CobotXPumpStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cobotx_a450_communication::CobotXPumpStatus_<ContainerAllocator>& v)
  {
    s << indent << "Status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Status);
    s << indent << "Pin1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Pin1);
    s << indent << "Pin2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Pin2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COBOTX_A450_COMMUNICATION_MESSAGE_COBOTXPUMPSTATUS_H
