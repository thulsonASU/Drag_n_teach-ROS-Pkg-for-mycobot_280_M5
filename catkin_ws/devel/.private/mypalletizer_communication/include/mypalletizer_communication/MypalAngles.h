// Generated by gencpp from file mypalletizer_communication/MypalAngles.msg
// DO NOT EDIT!


#ifndef MYPALLETIZER_COMMUNICATION_MESSAGE_MYPALANGLES_H
#define MYPALLETIZER_COMMUNICATION_MESSAGE_MYPALANGLES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mypalletizer_communication
{
template <class ContainerAllocator>
struct MypalAngles_
{
  typedef MypalAngles_<ContainerAllocator> Type;

  MypalAngles_()
    : joint_1(0.0)
    , joint_2(0.0)
    , joint_3(0.0)
    , joint_4(0.0)  {
    }
  MypalAngles_(const ContainerAllocator& _alloc)
    : joint_1(0.0)
    , joint_2(0.0)
    , joint_3(0.0)
    , joint_4(0.0)  {
  (void)_alloc;
    }



   typedef float _joint_1_type;
  _joint_1_type joint_1;

   typedef float _joint_2_type;
  _joint_2_type joint_2;

   typedef float _joint_3_type;
  _joint_3_type joint_3;

   typedef float _joint_4_type;
  _joint_4_type joint_4;





  typedef boost::shared_ptr< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> const> ConstPtr;

}; // struct MypalAngles_

typedef ::mypalletizer_communication::MypalAngles_<std::allocator<void> > MypalAngles;

typedef boost::shared_ptr< ::mypalletizer_communication::MypalAngles > MypalAnglesPtr;
typedef boost::shared_ptr< ::mypalletizer_communication::MypalAngles const> MypalAnglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mypalletizer_communication::MypalAngles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mypalletizer_communication::MypalAngles_<ContainerAllocator1> & lhs, const ::mypalletizer_communication::MypalAngles_<ContainerAllocator2> & rhs)
{
  return lhs.joint_1 == rhs.joint_1 &&
    lhs.joint_2 == rhs.joint_2 &&
    lhs.joint_3 == rhs.joint_3 &&
    lhs.joint_4 == rhs.joint_4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mypalletizer_communication::MypalAngles_<ContainerAllocator1> & lhs, const ::mypalletizer_communication::MypalAngles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mypalletizer_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab9c47c63b70f349cc6b6b06b71d7bcf";
  }

  static const char* value(const ::mypalletizer_communication::MypalAngles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab9c47c63b70f349ULL;
  static const uint64_t static_value2 = 0xcc6b6b06b71d7bcfULL;
};

template<class ContainerAllocator>
struct DataType< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mypalletizer_communication/MypalAngles";
  }

  static const char* value(const ::mypalletizer_communication::MypalAngles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# float32 base\n"
"float32 joint_1\n"
"float32 joint_2\n"
"float32 joint_3\n"
"float32 joint_4\n"
"# float32 joint_5\n"
"# float32 joint_6\n"
;
  }

  static const char* value(const ::mypalletizer_communication::MypalAngles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_1);
      stream.next(m.joint_2);
      stream.next(m.joint_3);
      stream.next(m.joint_4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MypalAngles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mypalletizer_communication::MypalAngles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mypalletizer_communication::MypalAngles_<ContainerAllocator>& v)
  {
    s << indent << "joint_1: ";
    Printer<float>::stream(s, indent + "  ", v.joint_1);
    s << indent << "joint_2: ";
    Printer<float>::stream(s, indent + "  ", v.joint_2);
    s << indent << "joint_3: ";
    Printer<float>::stream(s, indent + "  ", v.joint_3);
    s << indent << "joint_4: ";
    Printer<float>::stream(s, indent + "  ", v.joint_4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYPALLETIZER_COMMUNICATION_MESSAGE_MYPALANGLES_H
